%%% スライド1 %%%
それでは発表を始めたいと思います．
関西大学大学院の重藤達也です．
タイトルはこのようなタイトルで発表していきます．
なお，前回の春のOR学会では"最短閉路を求める問題"としていましたが，”最短路問題”に変えました．
また，この研究は檀先生と，名古屋大学大学院の柳浦先生との共同研究です．

%%% スライド2 %%%
ではまず，本研究で提案する問題の問題定義をしたいと思います．
本問題では，有向グラフG=(V, A)上での制約付き最短路問題を考えます．
また，このグラフの枝は重みl_{ij}を持つものとします．

ここで，ある『移動体』を想定します．
この移動体はグラフG上を移動し，状態uを持ちます．
また，各節点iは移動体を受け入れる事ができる状態集合U_{i}を持ちます．
もし，移動体の状態が節点iの受け入れることができる集合に含まれていれば，移動体はその節点を訪問可能となります．
さらに，各枝(i, j)は状態遷移関数f_{ij}を持ちます．
この関数は，移動体が状態uで節点iに存在し，jへ移動する場合，状態がuからf_{ij}(u)に変化します．
この時，節点jが持つ”移動体を受け入れられる状態集合U_{j}”に変化後の移動体の状態が含まれていれば，
移動体は節点jに訪問可能となります．

このように，移動体は状態を枝が持つ状態遷移関数によって変化させながら，節点を訪問して行きます．

%%% スライド3 %%%
本研究はこのようなグラフに対して，始点sから終点tまでの最短単純路を求めることを目指します．
ただし，求める単純路は次の２つの制約を満たさなければならないこととします．
まず一つ目の制約は通過節点集合です．
この制約は，与えられた節点集合V'に対してすべてのv'を通過しなければならないという制約です．

２つ目の制約は，移動体が経路上のすべての節点に対して訪問可能であるという制約です．
なお，移動体には初期状態としてu_{0}を与えることとします．

ここでこの２つの制約を具体的に図で説明したいと思います．

%%% スライド4 %%%

本問題のグラフは，始点s，終点t，通過必須節点とそれ以外の”必ずしも通過しなくてもよい節点”が存在します．
通過節点制約はこの通過必須節点をすべて通過しなければないとい制約です．

このグラフの中でこのような経路に注目します．
まずこの経路の始点において，移動体が状態u_{0}を持ち，
1番の節点に移動する際，枝(0, 1)が持つ状態遷移関数によって移動体の状態が変化します．
変化したあと，1番の節点がもつ受け入れ可能状態集合U_{1}に移動体が持つ状態が含まれていれば訪問可能となります．
通過経路制約は，このように経路上のすべての節点において，移動体が訪問可能であるというものです．

本研究では，以上の2つの制約を満たす始点から終点までの単純路のなかで最短のものを求めることを目標とします．

%%% スライド5 %%%
ではここで，先ほど提案した問題に対する数理モデルと求解アルゴリズムについて説明します．

本研究で提案する手法は非対称巡回セールスマン問題に対する厳密解法である，部分巡回路除去制約を逐次敵に追加する手法を援用します．
具体的なモデル式は次のようになります．

まず，(1), (2)番の式は始点と終点，それと通過必須節点に関する制約になっています．
(3), (4)番の式は”必ずしも通過しなくてもよい節点”に関する式です．

%%% スライド6 %%%
次に(5)番の式は，枝数が2以下の閉路を禁止する式です．
(6)番の式は，部分路除去制約となっており，
Lは除去制約を課す部分路，
A_{L}はLに含まれる枝の集合，
Mは除去制約を課す部分路の集合
となっています．

以上の式を用いて，本問題を解くために用いる最適化問題をスターと名づけます．
この問題スターを用いて本問題を解くためのアルゴリズムを構築します．

%%% スライド7 %%%

まずMを空集合とし，問題スターを解きます．
そこで”得られた解が始点から終点までの単純路でない場合”や”単純路であるが通過経路制約を満たさない場合”は，
Mに部分路を追加し再度問題スターを解きます．
このように，”通過経路制約を満たす，始点から終点への最短単純路”を求めます．

%%% スライド8 %%%
前回の春のOR学会では，問題の規模が大きくなると計算時間が大きくかかってしまうという問題点がありました．
そこで今回，本研究ではアルゴリズムを高速化するような工夫をしました．
ここからは，その工夫について説明していきます．

まず，本研究のアルゴリズムは問題スターを繰り返し解く部分に高い計算コストがかかります．
この計算回数が大きくなると全体にかかる計算時間も大きくなってしまいます．
従って反復回数を減すことで計算時間を小さくすることが可能であると考えられます．

アルゴリズムにおいて，問題スターの求解が必要になるのは，
このように (図を指して) 始点から終点までの単純路が得られていない場合と，
始点から終点までの単純路であるが，通過経路制約を満たさない場合
の2通りになります．

%%% スライド9 %%%
そこで，『求解途中に出現する可能性が高いが通過経路制約を満たさない部分路』を事前に探し，
除去制約を追加しておくことが出来れば，求会途中にそれらを含むような解が現れなくなるため，
反復回数を減らすことができる可能性があります．

そこで部分路を列挙し，通過経路制約を満たす可能性ないかどうかを調べるようにしました．
すなわち，列挙した部分路に対して(7)番の式が成立するか調べ，成立する場合は，
その部分路に対して先ほどの(6)番の除去制約に追加するようにします．

%%% スライド10 %%%
しかし，大規模なグラフの部分路を，単純に列挙することは不可能です．

そこで，次の2つの条件を満たす部分路のみ列挙することにしました．

１つ目は，調べる部分路の始点または終点がv'または始点s,終点tであるということです．
本問題では，v'・始点s・終点tを必ず通過するため，この条件を満たす経路は，
求解途中に出現する可能性が高いと考えられます．

２つ目は，部分路の長さがあらかじめ定めたしきい値以下であるという条件です．
この条件を与えることで，列挙する部分路の範囲を限定することが可能となります．

このようにして，『求解途中に出現する可能性が高いが通過経路制約を満たさない部分路』を事前に探し，
その経路に対して，事前に除去制約を追加しておくことができます．


%%% スライド11 %%%

ではここからは，提案した問題に対する手法の有用性を確認するためにおこなった数値実験について説明していきます．

本数値実験では問題例を次のように作成しました．
n個の節点を500×500の領域に配置しました．
また，移動体が取り得る状態数をm個あるものとしています．
各節点がある状態を受け入れる事ができるかを表す確率をrとしました．
グラフ内の枝の接続関係に関しては，節点iが状態uを受け入れ可能である時，状態遷移関数で変更された状態が，
節点jに関して受け入れ可能であれば，枝(i, j)を設置することとしています．
通過必須節点は5の倍数とし，実行可能解は，3の倍数と５の倍数の節点を，添字の小さい順に並べた経路が，
実行可能となるようにしています．
また今回の問題例は始点と終点を同じ節点とし，閉路を求める問題にしています．

計算環境はこのような環境で実験を行いました．

%%% スライド12 %%%
ここからは，実験結果を示します．
まずこの表は，比較的小規模な問題例に対する実験結果です．
このような設定の問題をランダムに100問生成して求解をおこないました．
表中の
"den."は問題例のグラフにおける枝の密度の平均
"thres."はしきい値
"opt."は3600秒以内で最適解を求めることができた問題例の数
"time"は計算時間の平均です．

この表から，100問中ほとんどの問題が解けており，アルゴリズムがうまく機能していることがわかります．

次にしきい値と計算時間の関係についての結果を見てみたいとおもいます．

%%% スライド13 %%%
ここで示すグラフが先ほどお見せした(a)〜(d)のそれぞれの100問のなかから，計算時間が50番目の問題を
しきい値を変化させて計算をおこなった結果です．

今表示しているのは，節点数20の問題です．
この黒い折れ線は全体にかかった時間を表していて，左側の縦軸が計算時間を表しています，単位は秒です．
また，この青と黄緑の棒グラフですが，"部分路を列挙し通過経路制約を満たさない部分路を事前に追加する過程にかかった時間"と
"アルゴリズムを適用するのにかかった時間"の内訳を表しています．
黄緑色のグラフは"部分路を列挙し通過経路制約を満たさない部分路を事前に追加する過程にかかった時間"を表し，
青色のグラフは"アルゴリズムを適用するのにかかった時間"を表しています，
またそのとなりのピンク色の棒グラフは，事前に追加した除去制約の個数を片対数グラフで表しています．
これが節点数30の結果，これが節点数40の結果，これが節点数50の結果です．

どの問題も，しきい値0，すなわち高速化に対する工夫をしない計算時間よりも，
ある程度のしきい値を設定した計算時間の方が，計算時間が短くなっている事がわかります．
しかし，しきい値を大きくしすぎると計算時間も増加する傾向があることがわかります．

%%% スライド14 %%%
次にこのグラフは問題スターの求解回数と計算時間の関係についての結果を表すグラフです．
問題例は先程示した，節点数50の問題例です．

縦軸は問題スター１回あたりにかかった計算時間，横軸は問題スターの求解回数となっており，
色の違う折れ線グラフはそれぞれ，
青は200，ピンクは300，水色は400，といったふうに，それぞれしきい値を変えています．

このグラフから，しきい値を増やすことで，反復回数を減らすことができていることがわかります，
しかし，問題スターを１回解くのにかかる時間も増加している傾向があるのもわかります．

これらの結果から，しきい値を用いて列挙の範囲を制限することが有効であることと，
しきい値の選択は慎重に行わなければならないことがわかります．

%%% スライド15 %%%
次に比較的大規模な問題に対する計算結果を示します．
このように比較的大きな規模の問題でも現実的な時間で最適解を求められました．
しかし，この計算結果(h)のように，グラフ中の枝の密度が高くなると，
計算時間がかかっていることがわかります．
この結果からわかるように，グラフがある程度疎であれば，
提案したアルゴリズムは比較的大規模な問題に対して適用可能でことがわかります．
 
%%% スライド16 %%%
最後にまとめと今後の課題についてです．

本研究では，通過節点と通過経路に制約を持つ最短路問題と，それに対する手法を提案しました．
また，問題に対する求解アルゴリズムを高速化するための手法を提案しました．
また，サンプル問題を作成して数値実験をおこない，
比較的大規模な問題に対して，最適解を得ることができることを確認しました．

今後の課題としては，制約を動的に追加する手法の提案が挙げられます．

以上で発表を終わります．ありがとうございました．

%%% EOF %%%

